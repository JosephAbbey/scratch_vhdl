/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 5 times
    DflipFlop - 10 times
    OrGate - 2 times
    Splitter - 3 times
    Output - 3 times
    ConstantVal - 6 times
    Counter - 1 times
    AndGate - 1 times
    NotGate - 2 times
    Button - 1 times
    SubCircuit - 2 times
    Flag - 3 times
    DigitalLed - 4 times
    Clock - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
    Button - Buttons are not natively supported in verilog, consider using Inputs instead
    Clock - Use a single global clock
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg clk;

  wire [3:0] leds;

  Main DUT0(leds, clk);

  always begin
    #10
    clk = 0;
    #10
    clk = 1;
  end

  initial begin

    #15
    $display("leds = %b", leds);

    #10
    $display("leds = %b", leds);

    $finish;

  end
endmodule

*/

module led4_button4_verilog(leds, buttons, incr, reset, clk);
  output [3:0] leds;
  input incr, reset, clk;
  input [3:0] buttons;
  wire DflipFlop_5_Q, or_0_out, DflipFlop_8_Q, DflipFlop_0_Q, DflipFlop_9_Q, DflipFlop_1_Q, DflipFlop_2_Q, or_1_out, DflipFlop_7_Q, DflipFlop_3_Q, DflipFlop_6_Q, DflipFlop_4_Q, const_3, const_2, const_1, const_0;
  wire [3:0] Splitter_0_cmb;
  DflipFlop DflipFlop_5(DflipFlop_5_Q, , clk, DflipFlop_4_Q, reset, const_1, incr);
  assign or_0_out = DflipFlop_1_Q | DflipFlop_5_Q;
  DflipFlop DflipFlop_8(DflipFlop_8_Q, , clk, or_0_out, reset, const_3, const_2);
  assign Splitter_0_cmb = {DflipFlop_6_Q,DflipFlop_7_Q,DflipFlop_8_Q,DflipFlop_9_Q};
  assign leds = Splitter_0_cmb;
  DflipFlop DflipFlop_0(DflipFlop_0_Q, , clk, DflipFlop_5_Q, reset, const_0, incr);
  DflipFlop DflipFlop_9(DflipFlop_9_Q, , clk, DflipFlop_0_Q, reset, const_2, const_2);
  DflipFlop DflipFlop_1(DflipFlop_1_Q, , clk, DflipFlop_0_Q, reset, const_1, incr);
  DflipFlop DflipFlop_2(DflipFlop_2_Q, , clk, DflipFlop_1_Q, reset, const_1, incr);
  assign or_1_out = DflipFlop_2_Q | DflipFlop_4_Q;
  DflipFlop DflipFlop_7(DflipFlop_7_Q, , clk, or_1_out, reset, const_3, const_2);
  DflipFlop DflipFlop_3(DflipFlop_3_Q, , clk, DflipFlop_2_Q, reset, const_1, incr);
  DflipFlop DflipFlop_6(DflipFlop_6_Q, , clk, DflipFlop_3_Q, reset, const_3, const_2);
  DflipFlop DflipFlop_4(DflipFlop_4_Q, , clk, DflipFlop_3_Q, reset, const_1, incr);
  assign const_3 = 1'b0;
  assign const_2 = 1'b1;
  assign const_1 = 1'b0;
  assign const_0 = 1'b1;
endmodule

module Increment(incr, clk);
  output incr;
  input clk;
  wire and_0_out, not_1_out, not_0_out;
  wire [3:0] Counter_0_Value, const_0;
  Counter #(4) Counter_0(Counter_0_Value, , const_0, clk, );
  
  assign and_0_out = not_0_out & Counter_0_Value[0] & not_1_out & Counter_0_Value[3];
  assign incr = and_0_out;
  assign not_1_out = ~Counter_0_Value[2];
  assign not_0_out = ~Counter_0_Value[1];
  assign const_0 = 4'b1001;
endmodule



module Main(leds, clk);
  output [3:0] leds;
  input clk;
  wire reset_out, increment_i_out;
  wire [3:0] led4_button4_verilog_0_out, Unused;
  Button0 reset(reset_out);
  led4_button4_verilog led4_button4_verilog_0(led4_button4_verilog_0_out, Unused, increment_i_out, reset_out, clk);
  Flag #(4) Flag_2(led4_button4_verilog_0_out);
  
  
      always @ (*)
        $display("DigitalLed:led4_button4_verilog_0_out[3]=%d", led4_button4_verilog_0_out[3]);
  
      always @ (*)
        $display("DigitalLed:led4_button4_verilog_0_out[2]=%d", led4_button4_verilog_0_out[2]);
  
      always @ (*)
        $display("DigitalLed:led4_button4_verilog_0_out[1]=%d", led4_button4_verilog_0_out[1]);
  
      always @ (*)
        $display("DigitalLed:led4_button4_verilog_0_out[0]=%d", led4_button4_verilog_0_out[0]);
  assign leds = led4_button4_verilog_0_out;
  Flag Flag_0(clk);
  Increment increment_i(increment_i_out, clk);
  Flag Flag_1(increment_i_out);
  assign Unused = 4'b0000;
endmodule

module DflipFlop(q, q_inv, clk, d, a_rst, pre, en);
    parameter WIDTH = 1;
    output reg [WIDTH-1:0] q, q_inv;
    input clk, a_rst, pre, en;
    input [WIDTH-1:0] d;

    always @ (posedge clk or posedge a_rst)
    if (a_rst) begin
        q <= 'b0;
        q_inv <= 'b1;
    end else if (en == 0) ;
    else begin
        q <= d;
        q_inv <= ~d;
    end
endmodule
    
    module Counter(val, zero, max, clk, rst);
      parameter WIDTH = 1;
      output reg [WIDTH-1:0] val;
      output reg zero;
      input [WIDTH-1:0] max;
      input clk, rst;
    
      initial
        val = 0;
    
      always @ (val)
        if (val == 0)
          zero = 1;
        else
          zero = 0;
    
      always @ (posedge clk or posedge rst) begin
        if (rst)
          val <= 0;
        else
          if (val == max)
            val <= 0;
          else
            val <= val + 1;
      end
    endmodule// Skeleton for Button0
    /*
    module Button0(out);
      output reg out;
    
      initial begin
        //do something with the button here
      end
    endmodule
    */
    